using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using ResDb;
using System;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration;
using Google.Apis.Auth.OAuth2;
using Google.Apis.Drive.v3;
using Google.Apis.Services;
using Google.Apis.Auth.OAuth2.Responses;
using Google.Apis.Auth.OAuth2.Flows;
using System.IO;
using System.Collections.Generic;
using System.Threading;
using MasterProjectReserved.Models;
using Microsoft.Extensions.Logging;

namespace MasterWord.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class MasterWord : ControllerBase
    {
        private readonly DatabaseContext _dbContext;
        private readonly IConfiguration _configuration;
        private readonly ILogger<MasterWord> _logger;

        private readonly string _tempUploadFolder = "temp_uploads";

        public MasterWord(DatabaseContext dbContext, IConfiguration configuration, ILogger<MasterWord> logger)
        {
            _dbContext = dbContext;
            _configuration = configuration;
            _logger = logger;

            if (!Directory.Exists(_tempUploadFolder))
            {
                Directory.CreateDirectory(_tempUploadFolder);
            }
        }

        [HttpGet("all")]
        public async Task<IActionResult> GetAll()
        {
            var allWords = await _dbContext.MasterProjectReservedWord
                                            .Where(w => w.IsDeleted == false)
                                            .OrderByDescending(w => w.UpdateDate ?? w.CreateDate)
                                            .Select(w => new
                                            {
                                                w.Id,
                                                w.WordName,
                                                w.CreateDate,
                                                w.CreateBy,
                                                w.UpdateDate,
                                                w.UpdateBy,
                                                w.IsDeleted,
                                                w.IsActive
                                            })
                                            .ToListAsync();
            List<MasterProjectReservedWordRespond> _allWords = new List<MasterProjectReservedWordRespond>();
            int Sequence = 0;
            foreach (var item in allWords)
            {
                MasterProjectReservedWordRespond _item = new MasterProjectReservedWordRespond
                {
                    Id = item.Id,
                    WordName = item.WordName,
                    CreateDate = item.CreateDate,
                    CreateBy = item.CreateBy,
                    UpdateDate = item.UpdateDate,
                    UpdateBy = item.UpdateBy,
                    IsDeleted = item.IsDeleted,
                    IsActive = item.IsActive,
                    Sequence = Sequence + 1
                };

                _allWords.Add(_item);
                Sequence = Sequence + 1;
            }

            if (_allWords.Any())
            {
                return Ok(_allWords);
            }
            else
            {
                return NoContent();
            }
        }

        [HttpGet("{id}")]
        public async Task<IActionResult> GetId(string id)
        {
            var word = await _dbContext.MasterProjectReservedWord
                                        .Where(w => w.Id == id)
                                        .Select(w => new
                                        {
                                            w.Id,
                                            w.WordName,
                                            w.CreateDate,
                                            w.CreateBy,
                                            w.UpdateDate,
                                            w.UpdateBy,
                                            w.IsDeleted,
                                            w.IsActive
                                        })
                                        .FirstOrDefaultAsync();
            if (word == null)
            {
                return NotFound();
            }
            return Ok(word);
        }

        [HttpPost]
        public async Task<IActionResult> CreateWord([FromBody] MasterProjectReservedWordReq req)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            bool isNameUsed = await _dbContext.MasterProjectReservedWord
                .AnyAsync(w => w.WordName == req.WordName && (w.IsDeleted == null || w.IsDeleted == false));

            if (isNameUsed)
            {
                return Conflict(new { message = "ชื่อนี้มีอยู่ในระบบอยู่แล้ว : กรุณาใช้ชื่ออื่น" });
            }

            var newWord = new MasterProjectReservedWord
            {
                Id = Guid.NewGuid().ToString(),
                WordName = req.WordName,
                CreateDate = DateTime.UtcNow,
                CreateBy = "System",
                UpdateDate = null,
                UpdateBy = "System",
                IsDeleted = false,
                IsActive = req.IsActive ?? true,
            };

            _dbContext.MasterProjectReservedWord.Add(newWord);
            await _dbContext.SaveChangesAsync();

            return CreatedAtAction(nameof(GetId), new { id = newWord.Id }, newWord);
        }

        [HttpPut("{id}")]
        public async Task<IActionResult> PutWord(string id, [FromBody] MasterProjectReservedWordReq req)
        {
            if (!ModelState.IsValid)
            {
                var errors = ModelState.Values.SelectMany(v => v.Errors).Select(e => e.ErrorMessage).ToList();
                return BadRequest(new { error = string.Join("; ", errors) });
            }
            if (id != req.Id)
            {
                return BadRequest(new { error = "ID mismatch between route and request body." });
            }

            if (string.IsNullOrWhiteSpace(req.WordName))
            {
                return BadRequest(new { error = "Word Name cannot be empty." });
            }

            bool isNameUsed = await _dbContext.MasterProjectReservedWord
                .AnyAsync(w => w.WordName == req.WordName && w.Id != id && (w.IsDeleted == null || w.IsDeleted == false));

            if (isNameUsed)
            {
                return Conflict(new { error = "ชื่อนี้มีอยู่ในระบบอยู่แล้ว : กรุณาใช้ชื่ออื่น" });
            }

            var wordToUpdate = await _dbContext.MasterProjectReservedWord
                .FirstOrDefaultAsync(w => w.Id == id && (w.IsDeleted == null || w.IsDeleted == false));

            if (wordToUpdate == null)
            {
                return NotFound(new { error = "Word not found." });
            }

            wordToUpdate.WordName = req.WordName;
            wordToUpdate.IsActive = req.IsActive ?? true;
            wordToUpdate.UpdateDate = DateTime.UtcNow;
            wordToUpdate.UpdateBy = "System";

            _dbContext.MasterProjectReservedWord.Update(wordToUpdate);
            await _dbContext.SaveChangesAsync();

            return Ok(wordToUpdate);
        }

        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteId(string id)
        {
            var word = await _dbContext.MasterProjectReservedWord
                                        .FirstOrDefaultAsync(w => w.Id == id && (w.IsDeleted == null || w.IsDeleted == false));
            if (word == null)
            {
                return NotFound();
            }

            word.IsDeleted = true;
            word.UpdateDate = DateTime.UtcNow;
            word.UpdateBy = "System";

            _dbContext.MasterProjectReservedWord.Update(word);
            await _dbContext.SaveChangesAsync();

            return NoContent();
        }

        [HttpPost("upload-file")]
        public async Task<IActionResult> UploadFileToGoogleDrive([FromForm] FileUploadRequest request)
        {
            if (request.File == null || request.File.Length == 0)
            {
                return BadRequest(new { message = "No file uploaded." });
            }

            var file = request.File;
            var fileName = Path.GetFileName(file.FileName);
            var uniqueFileName = $"{Guid.NewGuid()}_{fileName}";
            var filePath = Path.Combine(_tempUploadFolder, uniqueFileName);

            try
            {
                _logger.LogInformation($"Attempting to save file locally: {filePath}");
                using (var stream = new FileStream(filePath, FileMode.Create))
                {
                    await file.CopyToAsync(stream);
                }
                _logger.LogInformation("File saved locally successfully.");

                _logger.LogInformation("Attempting to upload file to Google Drive...");
                var driveFileId = await UploadFileToDriveService(filePath, uniqueFileName, file.ContentType);
                _logger.LogInformation($"File uploaded to Google Drive. File ID: {driveFileId}");

                System.IO.File.Delete(filePath);
                _logger.LogInformation("Local temporary file deleted.");

                return Ok(new { message = "File uploaded successfully to Google Drive.", fileId = driveFileId });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error during file upload");
                if (System.IO.File.Exists(filePath))
                {
                    System.IO.File.Delete(filePath);
                    _logger.LogInformation("Local temporary file deleted due to error.");
                }
                return StatusCode(500, new { message = "Failed to upload file." });
            }
        }

        private async Task<string> UploadFileToDriveService(string localFilePath, string remoteFileName, string mimeType)
        {
            var clientId = _configuration["GoogleDrive:ClientId"];
            var clientSecret = _configuration["GoogleDrive:ClientSecret"];
            var refreshToken = _configuration["GoogleDrive:RefreshToken"];

            if (string.IsNullOrEmpty(clientId) || string.IsNullOrEmpty(clientSecret) || string.IsNullOrEmpty(refreshToken))
            {
                throw new Exception("Google Drive API credentials (ClientId, ClientSecret, RefreshToken) are not configured.");
            }

            UserCredential credential;
            try
            {
                credential = new UserCredential(new GoogleAuthorizationCodeFlow(
                    new GoogleAuthorizationCodeFlow.Initializer
                    {
                        ClientSecrets = new ClientSecrets
                        {
                            ClientId = clientId,
                            ClientSecret = clientSecret
                        },
                        Scopes = new[] { DriveService.Scope.DriveFile }
                    }),
                    "user",
                    new TokenResponse { RefreshToken = refreshToken });

                Console.WriteLine("Attempting to refresh access token...");
                await credential.RefreshTokenAsync(CancellationToken.None);
                Console.WriteLine("Access token refreshed successfully.");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error refreshing token: {ex.Message}");
                throw new Exception($"Failed to get Google Drive credentials or refresh token: {ex.Message}");
            }

            var service = new DriveService(new BaseClientService.Initializer()
            {
                HttpClientInitializer = credential,
                ApplicationName = "MyBackendFileUploadApp",
            });

            var fileMetadata = new Google.Apis.Drive.v3.Data.File()
            {
                Name = remoteFileName,
                Parents = new List<string> { "1CmgpNNE6UXChtiJrr3Xn9LJRzhIQu0pt" }
            };

            FilesResource.CreateMediaUpload request;
            using (var stream = new FileStream(localFilePath, FileMode.Open))
            {
                Console.WriteLine($"Creating Google Drive upload request for file: {remoteFileName}");
                request = service.Files.Create(fileMetadata, stream, mimeType);
                request.Fields = "id, name, mimeType, parents";

                Console.WriteLine("Starting file upload to Google Drive...");
                var uploadStatus = await request.UploadAsync();
                _logger.LogInformation($"Google Drive upload status: {uploadStatus.Status}, Exception: {uploadStatus.Exception?.Message}");
                Console.WriteLine("File upload request completed.");
            }

            var uploadedFile = request.ResponseBody;
            if (uploadedFile != null)
            {
                Console.WriteLine($"Google Drive Response Body received. File ID: {uploadedFile.Id}, Name: {uploadedFile.Name}");
                return uploadedFile.Id;
            }
            else
            {
                Console.WriteLine("Google Drive upload failed: Response Body is NULL.");
                throw new Exception("Google Drive upload failed: No response body.");
            }
        }
    }
}
